"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Get out of VI's compatible mode
set nocompatible

" Set how many lines of history VIM have to remember
set history=200

" Set to auto read when a file is changed from the outside
set autoread

" Set map leader
let mapleader = ","
let g:mapleader = ","

" See partial commands as you type
set showcmd

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Encoding & Language
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use UTF-8 as default processing enc
set encoding=utf-8

" File default encoding
set fileencoding=utf-8

" File encoding guess list
set fileencodings=utf-8,big5,euc-jp,gbk,euc-kr,utf-bom,iso8859-1

" Terminal encoding
set termencoding=utf-8

" Treat ambiguous width as double width (ONLY work for unicode encoding)
set ambiwidth=double

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fileformats
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Favorite file types
set fileformats=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FileType
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable file type plug-in
filetype plugin on
filetype indent on

autocmd! BufNewFile,BufRead *.conf set filetype=config

" tmux
autocmd! BufNewFile,BufRead *.tmux.conf*,*tmux.conf* set filetype=tmux

" git commit
autocmd! FileType gitcommit setlocal tw=72 expandtab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM userinterface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keep at least 5 lines above/below
set scrolloff=5

" Keep at least 5 lines left/right
set sidescrolloff=5

" Turn on wild menu
set wildmenu

" Always show current position
set ruler

" The command bar is 2 high
set cmdheight=2

" Do not redraw while running macros (much faster) (LazyRedraw)
set lazyredraw

" Fast terminal
set ttyfast

" Change buffer without saving
set hidden

" Set backspace
set backspace=start,indent,eol

" Backspace and cursor keys wrap to
set whichwrap+=<,>,h,l

" Set magic on
set magic

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=

" Show matching braces
set showmatch

" Show full completion tags
set showfulltag

" How many tenths of a second to blink (Bracket blinking)
set mat=2

" Remove VertSplit and EndOfBuffer characters
set fillchars=vert:\ ,eob:\ 

" Enable syntax highlighting
syntax enable

    """"""""""""""""""""""""""""""
    " Colors and Fonts
    """"""""""""""""""""""""""""""
    if &term == "xterm-color" || &term == "xterm-16color"
        set t_Co=16
        colorscheme vimos
    else
        set t_Co=256
        colorscheme vimos256
    endif

    """"""""""""""""""""""""""""""
    " Cursor line
    """"""""""""""""""""""""""""""
    " Highlight current line in Insert Mode
    function! s:EnterInsert()
        set cursorline
    endfunction

    function! s:LeaveInsert()
        set nocursorline
    endfunction

    autocmd InsertLeave * call s:LeaveInsert()
    autocmd InsertEnter * call s:EnterInsert()

    """"""""""""""""""""""""""""""
    " Status line
    """"""""""""""""""""""""""""""
    " Always show the status line
    set laststatus=2

    set statusline=%<%f%<%h%m%r\ \ %(\*%Y\*\ \ LineNr=%l\/%L\ \ Col=%03c%)\ \ \%P\*
    set rulerformat=%15(%c%V\ %p%%%)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore case when searching
set ignorecase

" Incremental search
set incsearch

" Highlight search things
set hlsearch

" Make search wrap around
set wrapscan

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Moving around and window
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Window configuration
nnoremap <LEADER>h <C-W>h
nnoremap <LEADER>j <C-W>j
nnoremap <LEADER>k <C-W>k
nnoremap <LEADER>l <C-W>l
" Make it also work in terminal
tnoremap <LEADER>h <C-W>h
tnoremap <LEADER>j <C-W>j
tnoremap <LEADER>k <C-W>k
tnoremap <LEADER>l <C-W>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Bash like
cnoremap <C-B> <HOME>
cnoremap <C-E> <END>
cnoremap <C-K> <C-U>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files and backups
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off
set nobackup

set nowritebackup
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable folding
set foldenable
set foldmethod=syntax

" Set a high foldlevel to default open all folds
set foldlevel=200

" 3 lines of column for fold showing, always
set foldcolumn=5

" Easily open and close folds
nnoremap <SPACE> za

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab
set shiftwidth=4
set softtabstop=8
set tabstop=8
set backspace=2
set smarttab
set linebreak
set textwidth=600

    """"""""""""""""""""""""""""""
    " Indent
    """"""""""""""""""""""""""""""
    " Auto indent
    set autoindent

    " Smart indent
    set smartindent

    " C-style indenting
    set cindent

    " Wrap lines
    set wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickfix window
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bang -nargs=? QFix call QFixToggle(<bang>0)

function! QFixToggle(forced)
    if exists("g:qfix_win") && a:forced == 0
        cclose
        unlet g:qfix_win
    else
        copen 10
        let g:qfix_win = bufnr("$")
    endif
endfunction

nnoremap <LEADER>q :QFix<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug-in configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    """"""""""""""""""""""""""""""
    " Cscope
    """"""""""""""""""""""""""""""
    if has("cscope")
        "set csprg=/usr/local/bin/cscope
        set cscopetagorder=0
        set cscopetag
        set cscopeverbose
        set cscopetag
        "set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-

        " add any database in current directory
        "if filereadable("cscope.out")
        "    cs add cscope.out
        " else add database pointed to by environment
        "elseif $CSCOPE_DB != ""
        "    cs add $CSCOPE_DB
        "endif
    endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M
noremap <LEADER>m mmHmt:%s/<C-V><CR>//ge<CR>'tzt'm

" Remove indenting on empty lines
noremap <F2> :%s/\s*$//g<CR>:noh<CR>''

" Super paste
"inoremap <C-V> <ESC>:set paste<CR>mui<C-R>+<ESC>mv'uV'v=:set nopaste<CR>

" Visual Tab
set listchars=tab:>-,trail:-,eol:$,nbsp:%,extends:>,precedes:<

" When editing a file, always jump to the last known cursor position.
" Donâ€™t do it when the position is invalid or when inside an event handle
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute "normal g`\"" |
    \ endif
 
" Quick window resize
nnoremap + <C-W>+
nnoremap - <C-W>-
nnoremap = <C-W>=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Group setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" C/C++
augroup cplusplus
    autocmd!
    function! _cplusplus()
        set shiftwidth=8
        set softtabstop=8
        set tabstop=8
        set noexpandtab

        set tags=./tags,../tags,../../tags,../../../tags,../../../../tags

        " None of these should be word dividers, so make them not be
        set iskeyword+=_,@,#

        " Line wrapping in c comments not c code
        "set textwidth=78

        if has("gui_running")
            hi Error100        gui=NONE guifg=#ffffff guibg=#6e2e2e
            hi ErrorLeadSpace gui=NONE guifg=#ffffff guibg=#6e2e2e
            hi ErrorTailSpace gui=NONE guifg=#ffffff guibg=#6e2e2e
        else
            hi Error100        cterm=NONE ctermfg=79 ctermbg=32
            hi ErrorLeadSpace cterm=NONE ctermfg=79 ctermbg=33
            hi ErrorTailSpace cterm=NONE ctermfg=79 ctermbg=33
        endif

        syntax match ErrorLeadSpace /^ \+/      " highlight any leading spaces
        syntax match ErrorTailSpace / \+$/      " highlight any trailing spaces
        match Error100              /\%>100v.\+/ " highlight anything past 100 in red
        
        if has("cscope")
            nmap <LEADER>s :cs find s <C-R>=expand("<cword>")<CR><CR>   
            nmap <LEADER>g :cs find g <C-R>=expand("<cword>")<CR><CR>   
            nmap <LEADER>c :cs find c <C-R>=expand("<cword>")<CR><CR>   
            nmap <LEADER>t :cs find t <C-R>=expand("<cword>")<CR><CR>   
            nmap <LEADER>e :cs find e <C-R>=expand("<cword>")<CR><CR>   
            nmap <LEADER>f :cs find f <C-R>=expand("<cfile>")<CR><CR>   
            nmap <LEADER>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
            nmap <LEADER>d :cs find d <C-R>=expand("<cword>")<CR><CR>   
        endif

        " Support more C-related types
        syntax keyword cType uint ubyte ulong uint64_t uint32_t uint16_t uint8_t boolean_t int64_t int32_t int16_t int8_t u_int64_t u_int32_t u_int16_t u_int8_t
        syn keyword cOperator likely unlikely

        " C-mode formatting options
        "   t auto-wrap comment
        "   c allows textwidth to work on comments
        "   q allows use of gq* for auto formatting
        "   l don't break long lines in insert mode
        "   r insert '*' on <cr>
        "   o insert '*' on newline with 'o'
        "   n recognize numbered bullets in comments
        set formatoptions=tcqlron

        " C-mode options (cinoptions==cino)
        " N     number of spaces
        " Ns    number of spaces * shiftwidth
        " >N    default indent
        " eN    extra indent if the { is at the end of a line
        " nN    extra indent if there is no {} block
        " fN    indent of the { of a function block
        " gN    indent of the C++ class scope declarations (public, private, protected)
        " {N    indent of a { on a new line after an if,while,for...
        " }N    indent of a } in reference to a {
        " ^N    extra indent inside a function {}
        " :N    indent of case labels
        " =N    indent of case body
        " lN    align case {} on the case line
        " tN    indent of function return type
        " +N    indent continued algibreic expressions
        " cN    indent of comment line after /*
        " )N    vim searches for closing )'s at most N lines away
        " *N    vim searches for closing */ at most N lines away
        set cinoptions=:0l1t0g0

        " folding
        "  - reserve 4 columns on the left for folding tree
        "  - fold by syntax, use {}'s
        "  - start with all folds open

        " cool C abbreviations...
        abbreviate #i #include
        abbreviate #d #define

        "highlight OverLength ctermbg=red ctermfg=white guibg=#592929
        "match OverLength /\%81v.\+/

    endfunction
    autocmd FileType c,cpp call _cplusplus()
    autocmd BufEnter *.c,*.h,*.cpp,*.hpp,*.cc call _cplusplus()
augroup END

" Python
augroup python
    autocmd!
    function! _python()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
        set expandtab
        "set tags+=$HOME/.vim/tags/python

        " syntax/python.vim
        let python_highlight_all = 1
        set foldmethod=indent
        set foldnestmax=4
        set makeprg=pylint\ --reports=n\ --output-format=parseable\ %:p\ \\\|\ grep\ -v\ -e\ \"^No\ config\ file\"
        set efm=%A%f:%l:\ [%t%.%#]\ %m,%Z%p^^,%-C%.%#

        nnoremap <LEADER>ls :set list<CR>
        nnoremap <LEADER>ns :set nolist<CR>
        nnoremap <F2> :%s/\s*$//g<CR>:noh<CR>''

        highlight OverLength ctermbg=red ctermfg=white
        match OverLength /\%101v.\+/
    endfunction
    autocmd FileType python call _python()
augroup END

" Go
augroup go
    autocmd!
    function! _go()
        set shiftwidth=8
        set softtabstop=8
        set tabstop=8
    endfunction
    autocmd FileType go call _go()
augroup END

" shell script
augroup sh
    autocmd!
    function! _sh()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
    endfunction
    autocmd FileType sh call _sh()
augroup END

" vim script
augroup vim
    autocmd!
    function! _vim()
        set shiftwidth=4
        set softtabstop=4
        set tabstop=4
        set expandtab
    endfunction
    autocmd FileType vim call _vim()
augroup END

" quick fix
augroup qf
    autocmd!
    function! _qf()
        set nonumber
        set noruler
        set cursorline
        setlocal syntax=off
    endfunction
    autocmd FileType qf call _qf()
augroup END

source ~/.vim/upstream.vim

source ~/.vim/osc52.vim
nnoremap <LEADER>o :call SendViaOSC52(getreg())<CR>

source ~/.vim/bufmenu.vim

function! ShellHorizontal()
    let l:height = min([float2nr(winheight('%')) / 2, 24])
    execute 'belowright terminal ++rows=' . l:height
endfunction
nnoremap <LEADER>sh :call ShellHorizontal()<CR>
function! ShellVertical()
    let l:width = min([float2nr(winwidth('%') / 2), 80])
    execute 'belowright vertical terminal ++cols=' . l:width
endfunction
nnoremap <LEADER>vs :call ShellVertical()<CR>

function! Cscope()
    let l:width = min([float2nr(winwidth('%') / 4), 80])
    execute 'vertical belowright terminal ++cols=' . l:width . ' ++kill=term ++close cscope -Rkbqv'

    function! ResetCscope()
        execute 'cscope kill -1'
        execute 'cscope add cscope.out'
    endfunction
    autocmd! WinClosed <buffer> call ResetCscope()

    execute 'wincmd h'
endfunction
nnoremap <LEADER>cs :call Cscope()<CR>

function! FugitiveGitStatus()
    for l:winnr in range(1, winnr('$'))
        if !empty(getwinvar(l:winnr, 'fugitive_status'))
            execute l:winnr . 'close'
            return
        endif
    endfor

    let l:width = min([float2nr(&columns / 3), 80])

    execute 'vertical botright G'
    execute 'vertical resize ' . l:width
    setlocal statusline=%q foldcolumn=0 nonu nowrap winfixwidth
endfunction
nnoremap <LEADER>gs :call FugitiveGitStatus()<CR>
